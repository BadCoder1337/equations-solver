{"version":3,"sources":["types/index.ts","state/local-storage.ts","state/effects.ts","state/store.ts","components/Control/index.tsx","components/Formula/index.tsx","decorators/throttle.ts","methods.ts","components/Graph/index.tsx","components/MathBoard/index.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["SolvingMethod","loadState","serializedState","localStorage","getItem","JSON","parse","err","saveState","state","stringify","setItem","window","evaluatex","Evaluate","withEffects","store","on","subscribe","f","objects","undefined","latex","console","log","x","error","toString","split","onAll","getState","initialState","formula","step","eps","solvingMethod","DICHOTOMY","scale","offset","precisePlot","Object","assign","Store","createStore","initialEvaluatex","withStore","connect","actions","writeCalculationMethod","event","set","parseInt","target","value","param","this","props","className","get","onChange","disabled","SECANT","NEWTON","ITERATION","onClick","draw","solve","type","checked","React","Component","writeFloat","mathField","parseFloat","writeFormula","saveMQ","Formula","editRaw","toggleRaw","setState","mathquillDidMount","Roots","roots","map","r","i","digits","Math","abs","log10","toFixed","length","key","delay","Methods","a","b","c","B","C","isMobile","some","rexp","test","navigator","userAgent","_","__","propertyDesciptor","func","ms","isThrottled","savedArgs","savedThis","wrapper","arguments","apply","setTimeout","throttle","width","innerWidth","height","innerHeight","points","resizeCanvas","bind","resetTransform","handleDrag","handleScroll","drawCanvas","addEventListener","removeEventListener","calculatePoints","evt","preventDefault","layer","getLayer","attrs","id","modifiers","getModifierState","stage","getStage","oldScale","mousePos","getPointerPosition","y","newScale","deltaY","newPos","absPos","getAbsolutePosition","range","corners","scaledStep","push","rootZones","forEach","p","next","filter","Number","isFinite","center","withScale","withStrokeWidth","strokeWidth","sqrt","Stage","ReactKonva","Layer","Group","Rect","Line","Text","onWheel","onDblClick","draggable","onDragEnd","fill","stroke","flat","scaleY","text","v","values","fontSize","fontFamily","operators","writeLaTex","op","write","replace","Button","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c0919685.chunk.js","sourcesContent":["export enum SolvingMethod {\r\n    DICHOTOMY,\r\n    SECANT,\r\n    NEWTON,\r\n    ITERATION\r\n}\r\n\r\nexport type ArrayPoint = [number, number];\r\n","import { IState } from './store';\r\n\r\nexport const loadState: () => IState = () => {\r\n  try {\r\n      const serializedState = localStorage.getItem('state');\r\n      if (serializedState === null) {\r\n      return undefined;\r\n      }\r\n      return JSON.parse(serializedState);\r\n  } catch (err) {\r\n      return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = (state: IState) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem('state', serializedState);\r\n  } catch {\r\n    // ignore write errors\r\n  }\r\n};\r\n","import Evaluate from 'evaluatex';\r\nimport { saveState } from './local-storage';\r\nimport { objects, StoreEffects } from './store';\r\n\r\n// @ts-ignore\r\nwindow.evaluatex = Evaluate;\r\n\r\nconst withEffects: StoreEffects = store => {\r\n  // store\r\n  //   .hook('eps', (previousValue, value) => parseFloat());\r\n  // store\r\n  //   .hook('step', (previousValue, value) => );\r\n\r\n  store\r\n    .on('formula')\r\n    .subscribe(f => {\r\n      try {\r\n        objects.evaluatex = Evaluate(f, undefined, { latex: true }\r\n        );\r\n        console.log(objects.evaluatex({x: 2}));\r\n      } catch (error) {\r\n        objects.evaluatex = null;\r\n        console.log(error.toString().split('\\n')[0]);\r\n      }\r\n    });\r\n\r\n  store\r\n    .onAll()\r\n    .subscribe(() =>\r\n      saveState(store.getState())\r\n    );\r\n  return store;\r\n};\r\n\r\nexport default withEffects;\r\n","import evaluatex, { EvalFunc } from 'evaluatex';\r\nimport { IMathField } from 'react-mathquill';\r\nimport { connect, createStore, Effects, Store as UnduxStore } from 'undux';\r\nimport { SolvingMethod } from '../types';\r\nimport withEffects from './effects';\r\nimport { loadState, saveState } from './local-storage';\r\n\r\nconst initialState = {\r\n    formula: 'sin(x)',\r\n    step: 0.01,\r\n    eps: 0.0001,\r\n    solvingMethod: SolvingMethod.DICHOTOMY,\r\n    scale: [100, 100],\r\n    offset: [0.5, 0.5],\r\n    precisePlot: false,\r\n};\r\n\r\nexport type IState = typeof initialState;\r\n\r\nexport interface IObjects {\r\n    mathField: IMathField;\r\n    evaluatex: EvalFunc | null;\r\n}\r\n\r\nexport interface IActions {\r\n    solve: () => void;\r\n    draw: () => void;\r\n}\r\n\r\nexport interface IStoreProps {\r\n    store: UnduxStore<IState>;\r\n}\r\n\r\nexport type StoreEffects = Effects<IState>;\r\n\r\nif (!loadState()) {\r\n    saveState(initialState);\r\n}\r\n\r\nObject.assign(initialState, loadState());\r\n\r\nexport const Store = createStore(initialState);\r\nwithEffects(Store);\r\nexport const withStore = connect(Store);\r\n\r\nexport const actions: Partial<IActions> = {};\r\n\r\nlet initialEvaluatex;\r\n\r\ntry {\r\n    initialEvaluatex = evaluatex(initialState.formula);\r\n} catch (err) {/* */}\r\n\r\nexport const objects: Partial<IObjects>  = {\r\n    evaluatex: initialEvaluatex,\r\n};\r\n","import React from 'react';\r\nimport { actions, IState, IStoreProps, Store, withStore } from '../../state/store';\r\nimport { SolvingMethod } from '../../types';\r\nimport './Control.css';\r\n\r\n// interface IState {\r\n//     value: number;\r\n// }\r\nconst writeCalculationMethod = (event: React.ChangeEvent<HTMLSelectElement>) => Store.set('solvingMethod')(parseInt(event.target.value));\r\nconst writeCheckbox = (param: keyof IState) => (event: React.ChangeEvent<HTMLInputElement>) => Store.set(param)(event.target.checked);\r\n\r\nclass Control extends React.Component<IStoreProps/* , IState */> {\r\n    public render() {\r\n        const { store } = this.props;\r\n        return (\r\n            <div className=\"Control\">\r\n                <div className=\"Control-panel\">\r\n                    <select className=\"Control-select\" value={store.get('solvingMethod')} onChange={writeCalculationMethod}>\r\n                        <option value={SolvingMethod.DICHOTOMY}>Метод половинного деления</option>\r\n                        <option disabled value={SolvingMethod.SECANT}>Метод хорд (скоро...)</option>\r\n                        <option disabled value={SolvingMethod.NEWTON}>Метод касательных (скоро...)</option>\r\n                        <option disabled value={SolvingMethod.ITERATION}>Метод простых итераций (скоро...)</option>\r\n                    </select>\r\n                    <button onClick={actions.draw} className=\"Control-button\">График</button>\r\n                    <button onClick={actions.solve} className=\"Control-button\">Рассчитать</button>\r\n                    <span className=\"Control-panel-checkbox\">\r\n                        <input type=\"checkbox\" checked={store.get('precisePlot')} onChange={writeCheckbox('precisePlot')}/>\r\n                        <span>Точное построение</span>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStore(Control);\r\n","import React from 'react';\r\nimport { IMathField, MathQuill, MathQuillStatic } from 'react-mathquill';\r\nimport { IState, IStoreProps, objects, Store, withStore } from '../../state/store';\r\nimport './Formula.css';\r\n\r\ninterface IComponentState {\r\n    editRaw: boolean;\r\n}\r\n\r\ninterface IRoots {\r\n    roots: number[];\r\n}\r\n\r\nconst writeFloat = (param: keyof IState) => (mathField: IMathField) => Store.set(param)(parseFloat(mathField.latex()));\r\nconst writeFormula = (mathField: IMathField) => Store.set('formula')(mathField.latex());\r\nconst saveMQ = (mathField: IMathField) => objects.mathField = mathField;\r\n\r\nclass Formula extends React.Component<IStoreProps, IComponentState> {\r\n    public state = { editRaw: false };\r\n\r\n    public toggleRaw = () => {\r\n        this.setState({ editRaw: !this.state.editRaw });\r\n    }\r\n\r\n    public render() {\r\n        const { store } = this.props;\r\n        return (\r\n            <div className=\"Formula\">\r\n                <MathQuill\r\n                    className={typeof objects.evaluatex !== 'object' ? '' : 'Formula-error'}\r\n                    latex={store.get('formula')}\r\n                    onChange={writeFormula}\r\n                    mathquillDidMount={saveMQ}\r\n                />\r\n                <MathQuillStatic\r\n                    latex=\"=0,\\ e=\"\r\n                />\r\n                <MathQuill\r\n                    latex={store.get('eps').toString()}\r\n                    onChange={writeFloat('eps')}\r\n                />\r\n                <MathQuillStatic\r\n                    latex=\",\\ \\Delta=\"\r\n                />\r\n                <MathQuill\r\n                    latex={store.get('step').toString()}\r\n                    onChange={writeFloat('step')}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport const Roots = ({ roots }: IRoots) => (\r\n    <>{\r\n    // tslint:disable-next-line:jsx-no-multiline-js\r\n        roots\r\n        .map((r, i) => {\r\n            const digits = Math.abs(Math.log10(Store.get('eps')));\r\n            const latex = `x_{${i + 1}}=`\r\n                + +r.toFixed(digits)\r\n                + (i < roots.length - 1 ? ',\\\\ ' : '');\r\n            return (\r\n                <MathQuillStatic\r\n                    key={`r${i}`}\r\n                    latex={latex}\r\n                />\r\n            );\r\n        })\r\n    }</>\r\n);\r\n\r\nexport default withStore(Formula);\r\n","import 'reflect-metadata';\r\n\r\nexport default function Throttle(delay: number) {\r\n    return (_: any, __: any, propertyDesciptor: PropertyDescriptor) => {\r\n\r\n        propertyDesciptor.value = throttle(propertyDesciptor.value, delay);\r\n\r\n        return propertyDesciptor;\r\n    };\r\n}\r\n\r\nexport function throttle(func: (args: IArguments) => any, ms: number) {\r\n\r\n  let isThrottled = false;\r\n  let savedArgs: any = null;\r\n  let savedThis: any = null;\r\n\r\n  function wrapper(this: any) {\r\n\r\n    if (isThrottled) {\r\n      savedArgs = arguments;\r\n      savedThis = this;\r\n      return;\r\n    }\r\n\r\n    func.apply(this, [arguments]);\r\n\r\n    isThrottled = true;\r\n\r\n    setTimeout(() => {\r\n      isThrottled = false;\r\n      if (savedArgs) {\r\n        wrapper.apply(savedThis, savedArgs);\r\n        savedArgs = savedThis = null;\r\n      }\r\n    }, ms);\r\n  }\r\n\r\n  return wrapper;\r\n}\r\n","import { objects, Store } from './state/store';\r\nimport { ArrayPoint, SolvingMethod } from './types';\r\n\r\nexport default class Methods {\r\n    public static [SolvingMethod.DICHOTOMY]([a, b]: ArrayPoint): number {\r\n        const c = (a + b) / 2;\r\n        if (b - a > Store.get('eps')) {\r\n            const B = objects.evaluatex!({ x: b });\r\n            const C = objects.evaluatex!({ x: c });\r\n            return C === 0\r\n                ? c\r\n                : C * B < 0\r\n                    ? Methods[SolvingMethod.DICHOTOMY]([c, b])\r\n                    : Methods[SolvingMethod.DICHOTOMY]([a, c]);\r\n        } else {\r\n            return c;\r\n        }\r\n    }\r\n\r\n    public static [SolvingMethod.ITERATION]([a, b]: ArrayPoint): number {\r\n        console.log('iterations');\r\n        const c = (a + b) / 2;\r\n        return c;\r\n    }\r\n\r\n    public static [SolvingMethod.NEWTON]([a, b]: ArrayPoint): number {\r\n        console.log('newton');\r\n        const c = (a + b) / 2;\r\n        return c;\r\n    }\r\n\r\n    public static [SolvingMethod.SECANT]([a, b]: ArrayPoint): number {\r\n        console.log('secant');\r\n        const c = (a + b) / 2;\r\n        return c;\r\n    }\r\n}\r\n","import { Layer as LayerType } from 'konva/types/Layer';\nimport { KonvaEventObject } from 'konva/types/Node';\nimport { Stage as StageType } from 'konva/types/Stage';\nimport React from 'react';\nimport * as ReactKonva from 'react-konva';\nimport Throttle from '../../decorators/throttle';\nimport Methods from '../../methods';\nimport { actions, IStoreProps, objects, withStore } from '../../state/store';\nimport { ArrayPoint } from '../../types';\nimport { Roots } from '../Formula';\nimport './Graph.css';\n\nconst isMobile = [/Android/, /webOS/, /iPhone/, /iPad/, /iPod/, /BlackBerry/, /Windows Phone/].some(rexp => rexp.test(navigator.userAgent));\nconst scaleFactor = 1.1;\n\ninterface IState {\n  width: number;\n  height: number;\n  points: ArrayPoint[];\n  roots: number[];\n}\n\nclass Graph extends React.Component<IStoreProps, IState> {\n  constructor(props: any) {\n    super(props);\n\n    this.resizeCanvas = this.resizeCanvas.bind(this);\n    this.resetTransform = this.resetTransform.bind(this);\n    this.handleDrag = this.handleDrag.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n    actions.draw = this.drawCanvas.bind(this);\n    actions.solve = this.solve.bind(this);\n  }\n\n  public state = { width: window.innerWidth * 0.9, height: window.innerHeight * 0.6, points: [], roots: [] };\n\n  public componentDidMount() {\n    window.addEventListener('resize', this.resizeCanvas);\n    this.drawCanvas();\n  }\n\n  public componentWillUnmount() {\n    window.removeEventListener('resize', this.resizeCanvas);\n  }\n\n  @Throttle(isMobile ? 1000 : 500)\n  public drawCanvas() {\n    console.log('Draw called');\n\n    this.setState({ points: this.calculatePoints() });\n  }\n\n  public resizeCanvas() {\n    this.setState({ width: window.innerWidth * 0.9, height: window.innerHeight * 0.6 });\n    this.drawCanvas();\n  }\n\n  public handleScroll(event: KonvaEventObject<WheelEvent>) {\n    event.evt.preventDefault();\n    const layer = event.target.getLayer() as LayerType;\n    if (layer && layer.attrs.id === 'graph') {\n      const keys = ['Control', 'Alt', 'Shift'];\n      const modifiers = keys.map(key => event.evt.getModifierState(key));\n      const stage = layer.getStage() as StageType;\n      const oldScale = layer.scale();\n      const mousePos = {\n        x: stage.getPointerPosition()!.x / oldScale.x - layer.x() / oldScale.x,\n        y: stage.getPointerPosition()!.y / oldScale.y - layer.y() / oldScale.y\n      };\n      const newScale = {\n        x: (modifiers[0] || modifiers[1])\n          ? (event.evt.deltaY < 0 ? oldScale.x * scaleFactor : oldScale.x / scaleFactor)\n          : oldScale.x,\n        y: (modifiers[0] || modifiers[2])\n          ? (event.evt.deltaY < 0 ? oldScale.y * scaleFactor : oldScale.y / scaleFactor)\n          : oldScale.y,\n      };\n      const newPos = {\n        x: -(mousePos.x - stage.getPointerPosition()!.x / newScale.x) * newScale.x,\n        y: -(mousePos.y - stage.getPointerPosition()!.y / newScale.y) * newScale.y,\n      };\n      this.props.store.set('scale')([newScale.x, newScale.y]);\n      this.props.store.set('offset')([newPos.x / this.state.width, newPos.y / this.state.height]);\n    }\n    // console.log();\n    this.drawCanvas();\n  }\n\n  public handleDrag(event: KonvaEventObject<DragEvent>) {\n    const absPos = event.target.getAbsolutePosition();\n    this.props.store.set('offset')([absPos.x / this.state.width, absPos.y / this.state.height]);\n    this.drawCanvas();\n  }\n\n  public resetTransform() {\n    this.props.store.set('offset')([0.5, 0.5]);\n    this.props.store.set('scale')([100, 100]);\n    this.drawCanvas();\n  }\n\n  public calculatePoints() {\n    if (objects.evaluatex) {\n      const store = this.props.store;\n      const offset = store.get('offset');\n      const range = this.state.width / store.get('scale')[0];\n      const corners = [-range * offset[0], range * (1 - offset[0])];\n      const scaledStep = store.get('precisePlot') ? store.get('step') : (corners[1] - corners[0]) / this.state.width;\n\n      const points: ArrayPoint[] = [];\n      for (let x = corners[0]; x < corners[1]; x += scaledStep) {\n        try {\n          points.push([x, objects.evaluatex({ x })]);\n        } catch (error) {\n          console.log('errrr');\n        }\n      }\n      return points;\n    } else {\n      return [];\n    }\n  }\n\n  public solve() {\n    const points = this.calculatePoints();\n    const rootZones: ArrayPoint[] = [];\n    points.forEach((p, i) => {\n      const next = points[i + 1];\n      if (next && next[1] * p[1] <= 0) {\n        rootZones.push([p[0], next[0]]);\n      }\n    });\n    console.log(rootZones);\n    const roots = rootZones\n      .map(Methods[this.props.store.get('solvingMethod')])\n      .filter(Number.isFinite);\n\n    console.log(roots);\n\n    this.setState({ points, roots });\n  }\n\n  public render() {\n    const state = this.state;\n    const store = this.props.store;\n\n    const center = {\n      x: state.width * store.get('offset')[0],\n      y: state.height * store.get('offset')[1],\n    };\n    const scale = {\n      x: store.get('scale')[0],\n      y: store.get('scale')[1]\n    };\n    const strokeWidth = 2 / Math.sqrt(scale.x * scale.y);\n\n    const withScale = { scale };\n    const withStrokeWidth = { strokeWidth };\n\n    const { Stage, Layer, Group, Rect, Line, Text } = ReactKonva;\n\n    return (\n      <div className=\"Graph\">\n        <Stage onWheel={this.handleScroll} className=\"Graph-stage\" {...state}>\n          <Layer onDblClick={this.resetTransform} draggable onDragEnd={this.handleDrag} {...withScale} id=\"graph\" {...center}>\n            <Group>\n              <Rect fill=\"transparent\" x={-center.x / scale.x} y={-center.y / scale.y} width={state.width / scale.x} height={state.height / scale.y} />\n              {/* <Rect fill=\"red\" width={state.width} height={state.height} /> */}\n              <Line stroke=\"black\" {...withStrokeWidth} points={[-9000, 0, 9000, 0]} />\n              <Line stroke=\"black\" {...withStrokeWidth} points={[0, -9000, 0, 9000]} />\n            </Group>\n            <Group>\n              <Line stroke=\"black\" {...withStrokeWidth} points={state.points.flat()} scaleY={-1} />\n            </Group>\n          </Layer>\n          <Layer id=\"text\">\n            <Text\n              onClick={this.resetTransform}\n              // tslint:disable-next-line:jsx-no-multiline-js\n              text={\n                'react-konva H:'\n                + state.height.toFixed(2)\n                + ' W:'\n                + state.width.toFixed(2)\n                + ' S:'\n                + store.get('scale').map(v => v.toFixed(2))\n                + ' O:'\n                + store.get('offset').map(v => v.toFixed(2))\n                + ' C:'\n                + Object.values(center).map(v => v.toFixed(2))\n                + ' B:'\n                + [-state.width / store.get('scale')[0], state.width / store.get('scale')[1]].map(v => v.toFixed(2))\n                + ' P:'\n                + state.points.length\n                + ' Click here to reset.'\n              }\n              fontSize={12}\n              fontFamily={`\"Lucida Console\", Monaco, monospace`}\n            />\n          </Layer>\n        </Stage>\n        <div className=\"Graph-roots\">\n          <Roots roots={state.roots} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStore(Graph);\n","import React from 'react';\r\nimport { MathQuillStatic } from 'react-mathquill';\r\nimport { IStoreProps, objects, withStore } from '../../state/store';\r\nimport './MathBoard.css';\r\n\r\n// interface IState {\r\n//     editRaw: boolean;\r\n// }\r\n\r\nconst operators = ['\\\\pi', '☐^2', 'x^{☐}', '\\\\sqrt{☐}', '\\\\sqrt[☐]{☐}', '\\\\frac{☐}{☐}', '\\\\log_{☐}'];\r\n\r\nconst writeLaTex = (op: string) => () => objects.mathField && objects.mathField.write(op.replace(/☐/g, ''));\r\n\r\nconst Button = (op: string, i: number) => (\r\n    <div\r\n        key={`btn${i}`}\r\n        className=\"MathBoard-buttons\"\r\n        onClick={writeLaTex(op)}\r\n    >\r\n        <MathQuillStatic latex={op} />\r\n    </div>\r\n);\r\n\r\nconst MathBoard: React.FC<IStoreProps> = ({ store }) => (\r\n    <div className=\"MathBoard\">\r\n        {operators.map(Button)}\r\n    </div>\r\n);\r\n\r\nexport default withStore(MathBoard);\r\n","import React from 'react';\nimport { IStoreProps, withStore } from '../../state/store';\nimport Control from '../Control';\nimport Formula from '../Formula';\nimport Graph from '../Graph';\nimport MathBoard from '../MathBoard';\nimport './App.css';\n\nclass App extends React.Component<IStoreProps> {\n  public render() {\n    // const { store } = this.props;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Graph />\n          <Formula />\n          <Control />\n          <MathBoard />\n        </header>\n      </div>\n    );\n  }\n}\n/* <div onClick={() => store.set('step')(store.get('step') + 0.1)}>\n  Edit <code>src/App.tsx</code> and save to {store.get('step')}.\n</div> */\n\nexport default withStore(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ninterface IConfig {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: IConfig) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: IConfig) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: IConfig) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n// import Root from './components/Root';\nimport './index.css';\nimport './mathquill.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}